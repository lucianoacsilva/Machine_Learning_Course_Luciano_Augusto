setwd
setwd()
getwd()
install.packages("readtext")
install.packages("tm")
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("slam")
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tm")
install.packages("slam")
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:tm", unload=TRUE)
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "pdftools", "pillar", "Rcpp", "rjson", "rlang", "rpart", "streamR", "stringi", "stringr", "survival", "utf8"))
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
colours()
mode(colours())
length(colours())
grep("red", colours())
grep("red", colours(), value = TRUE)
texto <- "O rato roeu a roupa do rei de Roma"
grep("O.*Roma", texto, value = TRUE)
grep("O.*roeu", texto, value = TRUE)
grep("rato", texto, value = TRUE)
texto <- c("O rato roeu a roupa do rei de Roma")
grep("rato", texto, value = TRUE)
typeof(texto)
typeof(colours())
colours()
texto
as.array(texto)
texto[1]
install.packages("udpipe")
install.packages("psych")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Groceries <- c("Onions", "Tomatoes", "Potatoes")
Clothes <- c("Socks", "T-Shirts")
Shopping <- list(Budget=30, Groceries=Groceries, Clothes=Clothes)
Shopping[c(1,2)]
Shopping[1]
Shopping[2]
Shopping[3]
Shopping["Budget"]
Shopping[[2]]
Shopping[2][[1]]
Shopping[2][[1]]
Shopping[[3]]
Shopping[c(1, 3)]
Shopping[c(2,3)]
coal <- read.csv("/Users/lucianosilva/Documents/Machine-Utilization.csv")
coal
head(coal, 20)
str(coal)
summary(coal)
#Derive utilization column
coal$Utilization = 1 - coal$Percent.Idle
#Handiling Date-Times in R
tail(coal)
?POSIXct
coal$PosixTime <- as.POSIXct(coal$Timestamp, format = "%d/%m/%Y %H:%M")
head(coal)
summary(coal)
#TIP: how to rearrange columns in a dataframe:
coal$Timestamp <- NULL
head(coal, 10)
coal <- coal[, c(4, 1, 2, 3)]
head(coal, 10)
#What is a list?
summary(coal)
RL1 <- coal[coal$Machine == "RL1", ]
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
#Constructing a list
RL1$Utilization
coal_stats_rl1 <- c(min(RL1$Utilization, na.rm = TRUE),
mean(RL1$Utilization, na.rm = TRUE),
max(RL1$Utilization, na.rm = TRUE))
coal_stats_rl1
length(which(RL1$Utilization < 0.90)) > 0
as.logical(length(which(RL1$Utilization < 0.90)))
coal_under_90 <-length(which(RL1$Utilization < 0.90)) > 0
coal_under_90
list_rl1 <- list("RL1", coal_stats_rl1, coal_under_90)
list_rl1
#Naming components of a list
list_rl1
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "Low Treshold")
#Anhoter way, like with dataframes
rm(list_rl1)
list_rl1 <- list(Machine = "RL1", Stats = coal_stats_rl1, LowTreshold = coal_under_90)
#Extracting components froam a list
#three ways:
#[] - will always return a list
#[[]]  - will always return the actual ojbect
#$ - same as [[]], but prettier
list_rl1
list_rl1[1]
list_rl1[[1]]
list_rl1$Machine
list_rl1[2]
typeof(list_rl1[2])
list_rl1[[2]]
typeof(list_rl1[[2]])
list_rl1$Stats
typeof(list_rl1$Stats)
#How would you access the 3rd element of the vector (max utilization)?
list_rl1
list_rl1[[2]][1]
#Adding and deleting list components
list_rl1
list_rl1[4] <- "New Information"
list_rl1
#Add a component via $ sign
#We will ad:
RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
#Remove a component
list_rl1[4] <- NULL
#Notice: numeration has shifted
list_rl1[4]
#Add another component
#Dataframe: For this machine
list_rl1$Data <- RL1
list_rl1
summary(list_rl1)
str(list_rl1)
#Subsetting a list
list_rl1
list_rl1[4][1]
list_rl1$UnknownHours[1]
#Proceed
list_rl1
list_rl1[1:3]
list_rl1[c(1,4)]
sublist_rl1 <- list_rl1[c("Machine", "Stats")]
sublist_rl1[[2]]
sublist_rl1$Stats[2]
#Double Square Bracktes Are NOT for Subsetting
list_rl1[[1:3]]
list_rl1[[4]]
y
sublist_rl1$Stats[2]
sublist_rl1[[2]]
list_rl1[c(1,4)]
list_rl1[1:3]
list_rl1[1:4]
Shopping$Groceries[2]
Shopping[2][2]
Shopping[2][[2]]
Shopping[[2][2]]
list_rl1[4][1]
Shopping[2]
Shopping[2][1]
Shopping[2][2]
Shopping[[2]]
Shopping[[2]][1]
Shopping[[2]][2]
Shopping[2][[2]]
Shopping$Groceries[2]
Shopping$Groceries[[2]]
str(Shopping$Groceries[[2]])
str(Shopping$Groceries[2])
sublist_rl1[[2]]
list_rl1[4][1]
list_rl1[[2]][1]
sublist_rl1[[2]]
#Colocar o diretório certo
setwd("/Users/lucianosilva/Documents/Machine Learning/Decision_Tree_Regression/")
library(rpart)
?rpart
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
regressor <- rpart(formula = Salary ~  ., data = dataset)
library(rpart)
regressor <- rpart(formula = Salary ~  ., data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
?rpart
control = rpart.control(minsplit = 1))
regressor <- rpart(formula = Salary ~  ., data = dataset,
control = rpart.control(minsplit = 1))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
summary(regressor)
plot(regressor)
#Colocar o diretório certo
setwd("/Users/lucianosilva/Documents/Machine Learning/Random_Forest_Regression/")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[-2],
y = dataset$Salary,
ntree = 500)
install.packages("randomForest")
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[-2],
y = dataset$Salary,
ntree = 500)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
dataset[1]
dataset$Level
dataset[0]
dataset[2]
View(dataset)
